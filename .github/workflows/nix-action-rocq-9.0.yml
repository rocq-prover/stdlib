jobs:
  Cheerios:
    needs:
    - coq
    - StructTact
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (Cheerios)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"Cheerios\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: StructTact'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "StructTact"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "Cheerios"
  CoLoR:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (CoLoR)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"CoLoR\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "CoLoR"
  ExtLib:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (ExtLib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"ExtLib\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ExtLib"
  ITree:
    needs:
    - coq
    - ExtLib
    - paco
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (ITree)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"ITree\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ExtLib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ExtLib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: paco'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "paco"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ITree"
  InfSeqExt:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (InfSeqExt)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"InfSeqExt\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "InfSeqExt"
  MenhirLib:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (MenhirLib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"MenhirLib\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "MenhirLib"
  QuickChick:
    needs:
    - coq
    - ExtLib
    - simple-io
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (QuickChick)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"QuickChick\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ExtLib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ExtLib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: simple-io'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "simple-io"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "QuickChick"
  StructTact:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (StructTact)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"StructTact\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "StructTact"
  Verdi:
    needs:
    - coq
    - Cheerios
    - InfSeqExt
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (Verdi)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"Verdi\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: Cheerios'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "Cheerios"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: InfSeqExt'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "InfSeqExt"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "Verdi"
  VerdiRaft:
    needs:
    - coq
    - Verdi
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (VerdiRaft)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"VerdiRaft\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: Verdi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "Verdi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "VerdiRaft"
  aac-tactics:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (aac-tactics)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"aac-tactics\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "aac-tactics"
  argosy:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (argosy)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"argosy\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "argosy"
  async-test:
    needs:
    - coq
    - itree-io
    - json
    - QuickChick
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (async-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"async-test\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: itree-io'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "itree-io"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: json'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "json"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: QuickChick'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "QuickChick"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "async-test"
  atbr:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (atbr)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"atbr\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "atbr"
  autosubst:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (autosubst)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"autosubst\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "autosubst"
  bbv:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (bbv)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"bbv\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bbv"
  bedrock2:
    needs:
    - coq
    - kami
    - riscvcoq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (bedrock2)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"bedrock2\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: kami'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "kami"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: riscvcoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "riscvcoq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bedrock2"
  bignums:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (bignums)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"bignums\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
  bignums-test:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (bignums-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"bignums-test\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums-test"
  category-theory:
    needs:
    - coq
    - mathcomp-ssreflect
    - equations
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (category-theory)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"category-theory\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "category-theory"
  ceres:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (ceres)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"ceres\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ceres"
  coinduction:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coinduction)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coinduction\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coinduction"
  coq:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
  coq-elpi:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-elpi)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq-elpi\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-elpi"
  coq-hammer:
    needs:
    - coq
    - coq-hammer-tactics
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-hammer)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq-hammer\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-hammer-tactics'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-hammer-tactics"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-hammer"
  coq-hammer-tactics:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-hammer-tactics)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq-hammer-tactics\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-hammer-tactics"
  coq-performance-tests:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-performance-tests)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq-performance-tests\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-performance-tests"
  coq-tools:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-tools)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coq-tools\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-tools"
  coqprime:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coqprime)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coqprime\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqprime"
  coquelicot:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coquelicot)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coquelicot\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coquelicot"
  coqutil:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coqutil)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"coqutil\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqutil"
  corn:
    needs:
    - coq
    - bignums
    - math-classes
    - coq-elpi
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (corn)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"corn\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: math-classes'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "math-classes"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-elpi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "corn"
  cross-crypto:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (cross-crypto)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"cross-crypto\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "cross-crypto"
  deriving:
    needs:
    - coq
    - mathcomp-ssreflect
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (deriving)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"deriving\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "deriving"
  dpdgraph-test:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (dpdgraph-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"dpdgraph-test\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "dpdgraph-test"
  engine-bench:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (engine-bench)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"engine-bench\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "engine-bench"
  equations:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (equations)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"equations\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
  fcsl-pcm:
    needs:
    - coq
    - mathcomp-algebra
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (fcsl-pcm)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"fcsl-pcm\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "fcsl-pcm"
  fiat-crypto:
    needs:
    - coq
    - coqprime
    - rewriter
    - rupicola
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (fiat-crypto)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"fiat-crypto\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coqprime'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqprime"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rewriter'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rewriter"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rupicola'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rupicola"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "fiat-crypto"
  fiat-crypto-legacy:
    needs:
    - coq
    - coqprime
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (fiat-crypto-legacy)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"fiat-crypto-legacy\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coqprime'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqprime"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "fiat-crypto-legacy"
  fiat-crypto-ocaml:
    needs:
    - coq
    - fiat-crypto
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (fiat-crypto-ocaml)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"fiat-crypto-ocaml\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: fiat-crypto'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "fiat-crypto"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "fiat-crypto-ocaml"
  flocq:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (flocq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"flocq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "flocq"
  hierarchy-builder:
    needs:
    - coq
    - coq-elpi
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (hierarchy-builder)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"hierarchy-builder\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-elpi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
  http:
    needs:
    - coq
    - QuickChick
    - async-test
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (http)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"http\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: QuickChick'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "QuickChick"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: async-test'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "async-test"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "http"
  iris:
    needs:
    - coq
    - stdpp
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (iris)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"iris\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdpp'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdpp"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "iris"
  iris-examples:
    needs:
    - coq
    - iris
    - autosubst
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (iris-examples)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"iris-examples\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: iris'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "iris"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: autosubst'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "autosubst"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "iris-examples"
  itauto:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (itauto)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"itauto\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "itauto"
  itree-io:
    needs:
    - coq
    - ITree
    - simple-io
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (itree-io)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"itree-io\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ITree'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ITree"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: simple-io'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "simple-io"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "itree-io"
  json:
    needs:
    - coq
    - parsec
    - MenhirLib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (json)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"json\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: parsec'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "parsec"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: MenhirLib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "MenhirLib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "json"
  kami:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (kami)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"kami\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "kami"
  math-classes:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (math-classes)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"math-classes\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "math-classes"
  mathcomp:
    needs:
    - coq
    - mathcomp-character
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-character'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-character"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp"
  mathcomp-algebra:
    needs:
    - coq
    - mathcomp-fingroup
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-algebra)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-algebra\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-order'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-order"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
  mathcomp-algebra-tactics:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-algebra
    - coq-elpi
    - mathcomp-zify
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-algebra-tactics)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-algebra-tactics\" \\\n   --dry-run 2>
        err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"\
        Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-elpi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-zify'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-zify"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra-tactics"
  mathcomp-analysis:
    needs:
    - coq
    - mathcomp-reals
    - mathcomp-field
    - mathcomp-bigenough
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-analysis)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-analysis\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-reals'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-reals"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-field'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-field"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-bigenough'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-bigenough"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-analysis"
  mathcomp-analysis-stdlib:
    needs:
    - coq
    - mathcomp-analysis
    - mathcomp-reals-stdlib
    - stdlib
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-analysis-stdlib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-analysis-stdlib\" \\\n   --dry-run 2>
        err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"\
        Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-analysis'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-analysis"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-reals-stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-reals-stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-analysis-stdlib"
  mathcomp-bigenough:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-bigenough)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-bigenough\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-bigenough"
  mathcomp-character:
    needs:
    - coq
    - mathcomp-field
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-character)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-character\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-field'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-field"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-character"
  mathcomp-classical:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-algebra
    - mathcomp-finmap
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-classical)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-classical\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-finmap'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-finmap"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-classical"
  mathcomp-field:
    needs:
    - coq
    - mathcomp-solvable
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-field)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-field\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-solvable'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-solvable"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-field"
  mathcomp-fingroup:
    needs:
    - coq
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-fingroup)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-fingroup\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-fingroup"
  mathcomp-finmap:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-finmap)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-finmap\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-finmap"
  mathcomp-reals:
    needs:
    - coq
    - mathcomp-classical
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-reals)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-reals\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-classical'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-classical"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-reals"
  mathcomp-reals-stdlib:
    needs:
    - coq
    - mathcomp-reals
    - stdlib
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-reals-stdlib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-reals-stdlib\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-reals'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-reals"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-reals-stdlib"
  mathcomp-solvable:
    needs:
    - coq
    - mathcomp-algebra
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-solvable)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-solvable\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-solvable"
  mathcomp-ssreflect:
    needs:
    - coq
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-ssreflect)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-ssreflect\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-order'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-order"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
  mathcomp-word:
    needs:
    - coq
    - mathcomp-algebra
    - mathcomp-ssreflect
    - mathcomp-fingroup
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-word)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-word\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-word"
  mathcomp-zify:
    needs:
    - coq
    - mathcomp-algebra
    - mathcomp-fingroup
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-zify)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mathcomp-zify\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-zify"
  metacoq:
    needs:
    - coq
    - equations
    - metacoq-safechecker-plugin
    - metacoq-erasure-plugin
    - metacoq-translations
    - metacoq-quotation
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-safechecker-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-safechecker-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-erasure-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-erasure-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-translations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-translations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-quotation'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-quotation"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq"
  metacoq-common:
    needs:
    - coq
    - equations
    - metacoq-utils
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-common)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-common\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-utils'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-utils"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-common"
  metacoq-erasure:
    needs:
    - coq
    - equations
    - metacoq-safechecker
    - metacoq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-erasure)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-erasure\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-safechecker"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-erasure"
  metacoq-erasure-plugin:
    needs:
    - coq
    - equations
    - metacoq-template-pcuic
    - metacoq-erasure
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-erasure-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-erasure-plugin\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-erasure'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-erasure"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-erasure-plugin"
  metacoq-pcuic:
    needs:
    - coq
    - equations
    - metacoq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-pcuic\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-common"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-pcuic"
  metacoq-quotation:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    - metacoq-pcuic
    - metacoq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-quotation)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-quotation\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-quotation"
  metacoq-safechecker:
    needs:
    - coq
    - equations
    - metacoq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-safechecker)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-safechecker\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-safechecker"
  metacoq-safechecker-plugin:
    needs:
    - coq
    - equations
    - metacoq-template-pcuic
    - metacoq-safechecker
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-safechecker-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-safechecker-plugin\" \\\n   --dry-run
        2> err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo
        \"Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-safechecker"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-safechecker-plugin"
  metacoq-template-coq:
    needs:
    - coq
    - equations
    - metacoq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-template-coq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-template-coq\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-common"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-coq"
  metacoq-template-pcuic:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    - metacoq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-template-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-template-pcuic\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-pcuic"
  metacoq-translations:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-translations)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-translations\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-translations"
  metacoq-utils:
    needs:
    - coq
    - equations
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-utils)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metacoq-utils\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq-utils"
  metarocq:
    needs:
    - coq
    - equations
    - metarocq-safechecker-plugin
    - metarocq-erasure-plugin
    - metarocq-translations
    - metarocq-quotation
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-safechecker-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-safechecker-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-erasure-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-erasure-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-translations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-translations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-quotation'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-quotation"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq"
  metarocq-common:
    needs:
    - coq
    - equations
    - metarocq-utils
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-common)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-common\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-utils'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-utils"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-common"
  metarocq-erasure:
    needs:
    - coq
    - equations
    - metarocq-safechecker
    - metarocq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-erasure)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-erasure\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-safechecker"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-erasure"
  metarocq-erasure-plugin:
    needs:
    - coq
    - equations
    - metarocq-template-pcuic
    - metarocq-erasure
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-erasure-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-erasure-plugin\" \\\n   --dry-run 2>
        err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"\
        Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-erasure'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-erasure"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-erasure-plugin"
  metarocq-pcuic:
    needs:
    - coq
    - equations
    - metarocq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-pcuic\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-common"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-pcuic"
  metarocq-quotation:
    needs:
    - coq
    - equations
    - metarocq-template-rocq
    - metarocq-pcuic
    - metarocq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-quotation)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-quotation\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-rocq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-rocq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-quotation"
  metarocq-safechecker:
    needs:
    - coq
    - equations
    - metarocq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-safechecker)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-safechecker\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-safechecker"
  metarocq-safechecker-plugin:
    needs:
    - coq
    - equations
    - metarocq-template-pcuic
    - metarocq-safechecker
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-safechecker-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-safechecker-plugin\" \\\n   --dry-run
        2> err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo
        \"Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-safechecker"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-safechecker-plugin"
  metarocq-template-pcuic:
    needs:
    - coq
    - equations
    - metarocq-template-rocq
    - metarocq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-template-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-template-pcuic\" \\\n   --dry-run 2>
        err > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"\
        Error: getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-rocq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-rocq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-pcuic"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-pcuic"
  metarocq-template-rocq:
    needs:
    - coq
    - equations
    - metarocq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-template-rocq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-template-rocq\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-common"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-rocq"
  metarocq-test:
    needs:
    - coq
    - metacoq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-test\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metacoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metacoq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-test"
  metarocq-translations:
    needs:
    - coq
    - equations
    - metarocq-template-rocq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-translations)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-translations\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: metarocq-template-rocq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-template-rocq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-translations"
  metarocq-utils:
    needs:
    - coq
    - equations
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (metarocq-utils)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"metarocq-utils\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "metarocq-utils"
  mtac2:
    needs:
    - coq
    - unicoq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mtac2)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"mtac2\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: unicoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "unicoq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mtac2"
  neural-net-coq-interp:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (neural-net-coq-interp)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"neural-net-coq-interp\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "neural-net-coq-interp"
  paco:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (paco)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"paco\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "paco"
  paramcoq-test:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (paramcoq-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"paramcoq-test\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "paramcoq-test"
  parsec:
    needs:
    - coq
    - ceres
    - ExtLib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (parsec)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"parsec\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ceres'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ceres"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ExtLib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ExtLib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "parsec"
  quickchick-test:
    needs:
    - coq
    - QuickChick
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (quickchick-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"quickchick-test\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: QuickChick'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "QuickChick"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "quickchick-test"
  relation-algebra:
    needs:
    - coq
    - aac-tactics
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (relation-algebra)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"relation-algebra\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: aac-tactics'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "aac-tactics"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-boot'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "mathcomp-boot"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "relation-algebra"
  rewriter:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rewriter)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"rewriter\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rewriter"
  riscvcoq:
    needs:
    - coq
    - coqutil
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (riscvcoq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"riscvcoq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coqutil'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqutil"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "riscvcoq"
  rocq-core:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rocq-core)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"rocq-core\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rocq-core"
  rocq-elpi:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rocq-elpi)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"rocq-elpi\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rocq-elpi"
  rocq-elpi-test:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rocq-elpi-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"rocq-elpi-test\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rocq-elpi-test"
  rupicola:
    needs:
    - coq
    - coqutil
    - bedrock2
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rupicola)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"rupicola\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coqutil'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coqutil"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: bedrock2'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "bedrock2"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "rupicola"
  sf:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (sf)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"sf\" \\\n   --dry-run 2> err > out || (touch fail;
        true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "sf"
  simple-io:
    needs:
    - coq
    - ExtLib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (simple-io)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"simple-io\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: ExtLib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "ExtLib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "simple-io"
  smtcoq:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (smtcoq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"smtcoq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "smtcoq"
  smtcoq-trakt:
    needs:
    - coq
    - trakt
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (smtcoq-trakt)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"smtcoq-trakt\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: trakt'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "trakt"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "smtcoq-trakt"
  stalmarck:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stalmarck)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stalmarck\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stalmarck"
  stalmarck-tactic:
    needs:
    - coq
    - stalmarck
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stalmarck-tactic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stalmarck-tactic\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stalmarck'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stalmarck"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stalmarck-tactic"
  stdlib:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stdlib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stdlib\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
  stdlib-refman-html:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stdlib-refman-html)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stdlib-refman-html\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib-refman-html"
  stdlib-test:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stdlib-test)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stdlib-test\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib-test"
  stdpp:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stdpp)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"stdpp\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdpp"
  tlc:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (tlc)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"tlc\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "tlc"
  trakt:
    needs:
    - coq
    - coq-elpi
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (trakt)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"trakt\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq-elpi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "trakt"
  unicoq:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (unicoq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"unicoq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "unicoq"
  vst:
    needs:
    - coq
    - flocq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (vst)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"vst\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: flocq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "flocq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "vst"
  waterproof:
    needs:
    - coq
    - stdlib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (waterproof)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-9.0\" --argstr job \"waterproof\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "rocq-9.0"
        --argstr job "waterproof"
name: Nix CI for bundle rocq-9.0
on:
  pull_request:
    paths:
    - .github/workflows/nix-action-rocq-9.0.yml
  pull_request_target:
    paths-ignore:
    - .github/workflows/nix-action-rocq-9.0.yml
    types:
    - opened
    - synchronize
    - reopened
  push:
    branches:
    - master
